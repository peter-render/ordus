unit fKalender;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, PlannerMonthView, DBPlannerMonthView, Planner,
  PlanSimpleEdit, StdCtrls, DB, DBPlanner, Grids, Wwdbigrd, Wwdbgrid,
  Menus, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  vcl.Wwkeycb;

type
  TfrmKalender = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    kal: TDBPlannerMonthView;
    Button1: TButton;
    dsoKalender: TDataSource;
    Button2: TButton;
    Button3: TButton;
    PopupMenu1: TPopupMenu;
    Nytt1: TMenuItem;
    N1: TMenuItem;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    RadioButton3: TRadioButton;
    Label1: TLabel;
    qryKalender: TFDQuery;
    qryKalenderId: TFDAutoIncField;
    qryKalenderStarttid: TStringField;
    qryKalenderSluttid: TStringField;
    qryKalenderBeteckning: TStringField;
    qryKalenderNotering: TStringField;
    qryKalenderColor: TStringField;
    qryKalenderOrderhuvudId: TIntegerField;
    qryKalenderHint: TStringField;
    qryKalenderDestination: TIntegerField;
    edtSok: TEdit;
    btnSok: TButton;
    Label2: TLabel;
    qryKalenderAntalAvrapporterad: TIntegerField;
    qryKalenderAntalTotal: TIntegerField;
    qryKalenderBGColor: TStringField;
    Memo1: TMemo;
    procedure FormShow(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure kalFieldsToItem(Sender: TObject; Fields: TFields; Item: TPlannerItem);
    procedure kalItemDblClick(Sender: TObject; Item: TPlannerItem);
    procedure Button3Click(Sender: TObject);
    procedure Nytt1Click(Sender: TObject);
    procedure kalItemToFields(Sender: TObject; Fields: TFields; Item: TPlannerItem);
    procedure aborttid1Click(Sender: TObject);
    procedure kalItemRightClick(Sender: TObject; Item: TPlannerItem);
    procedure kalDeleteItem(Sender: TObject; APlannerItem: TPlannerItem);
    procedure kalItemCreated(Sender: TObject; Item: TPlannerItem);
    procedure VisaDagens(intTag: integer);
    procedure RadioButton1Click(Sender: TObject);
    procedure RadioButton2Click(Sender: TObject);
    procedure RadioButton3Click(Sender: TObject);
    procedure btnSokClick(Sender: TObject);
    procedure edtSokChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmKalender: TfrmKalender;
  sqldef1: string;
  sqldef2: string;

implementation

uses Datamodule, funclib, fKalenderarende, fDagens, fPlaneringOrderradInfo;

{$R *.dfm}

procedure TfrmKalender.aborttid1Click(Sender: TObject);
var
  it: TPlannerItem;
begin
  kal.SelectDBItem;
  it.Free;

end;

procedure TfrmKalender.Button1Click(Sender: TObject);
var
  cYear, cMonth, cDay: Word;
begin
  DecodeDate(date, cYear, cMonth, cDay);
  kal.SetDate(cDay, cMonth, cYear);
  kal.Refresh;
end;

procedure TfrmKalender.Button2Click(Sender: TObject);
begin
  self.Close;
end;

procedure TfrmKalender.Button3Click(Sender: TObject);
begin

  kal.Refresh;

end;

procedure TfrmKalender.edtSokChange(Sender: TObject);
begin
  btnSok.Default := edtSok.Text <> '';
end;

procedure TfrmKalender.btnSokClick(Sender: TObject);
var
  plIt: TPlannerItem;
  s: String;
  d: TDateTime;
  cYear, cMonth, cDay: Word;
begin
  (*
    plIt := nil;
    repeat
    plIt := kal.Items.FindText(plIt, trim(edtsok.Text), [fnAutoGoto, fnText]);
    if Assigned(plIt) then
    ShowMessage('Found appointment');
    until plIt = nil;

    //  ShowMessage('No more items found');
  *)
  s := TRIM(edtSok.Text);

  begin
    // kal.Items.UnSelectAll;
    (*
      TFindTextParameter = (fnMatchCase, fnMatchFull, fnMatchRegular, fnMatchStart,
      fnAutoGoto, fnIgnoreHTMLTags, fnBackward, fnCaptionText, fnText);
      fnAutoGoto, fnMatchRegular, fnCaptionText]);
    *)

    plIt := nil;
    kal.ResetUpdate;
    (* plIt := kal.iTEMS.FindText(plIt, '*' + s + '*', [fnMatchRegular, fnAutoGoto,
      fnIgnoreHTMLTags, fnCaptionText]);
    *)
    plIt := kal.iTEMS.FindText(plIt, '*' + s + '*', [fnMatchRegular, fnAutoGoto, fnIgnoreHTMLTags, fnCaptionText]);

    if not assigned(plIt) then
      plIt := kal.iTEMS.FindText(plIt, '*' + s + '*', [fnMatchRegular, fnBackward, fnAutoGoto, fnIgnoreHTMLTags,
        fnCaptionText]);

    if assigned(plIt) then
    begin
      d := plIt.ItemStartTime;
      DecodeDate(d, cYear, cMonth, cDay);
      kal.SetDate(cDay, cMonth, cYear);
      kal.Refresh;
    end;
    edtSok.SelectAll;
  end;
end;

procedure TfrmKalender.FormCreate(Sender: TObject);
begin
  application.DefaultFont.Name := 'Tahoma';

  application.DefaultFont.Size := 8;

  sqldef1 :=
    'Select k.*,AntalAvrapporterad = (Select count(*) from OrderRad where  avrapporteradDatum is not null and orderid = k.OrderhuvudId ),';
  sqldef2 :=
    'AntalTotal = (Select count(*) from OrderRad where orderid =k.OrderhuvudId ),y.BGColor from kalender k  join orderhuvud h on h.id = k.OrderhuvudId join Ytbehandling y on y.id = h.YtbehandlingId ';

  (*
    memo1.Lines.Add(sqldef1);
    memo1.Lines.Add(sqldef2);
    memo1.CopyToClipboard;
  *)

end;

procedure TfrmKalender.FormShow(Sender: TObject);
var
  cYear, cMonth, cDay: Word;
begin

  with qryKalender do
  begin
    Close;
    sql.Clear;
    sql.Add(sqldef1 + sqldef2);
    open;
  end;

  DecodeDate(date, cYear, cMonth, cDay);

  kal.Year := cYear;
  kal.Month := cMonth;
  kal.day := cDay;

  self.position := poMainFormCenter;
  kal.AutoInsDel := true;

  kal.Refresh;
  kal.DragItemAlways := false;
  kal.DragItem := true;

end;

procedure TfrmKalender.VisaDagens(intTag: integer);
begin
  with TfrmPlaneringOrderradInfo.Create(application) do
  begin
    with spOrderKvarAttTillverka do
    begin
      Close;
      parambyname('@Orderid').value := intTag;
      parambyname('@Visaavrapporterade').value := false;
      open;
    end;
    showmodal;
  end;
end;

procedure TfrmKalender.kalDeleteItem(Sender: TObject; APlannerItem: TPlannerItem);
begin

  if APlannerItem.tag = 1 then
    abort
  else
  begin
    if messagedlg('Vill du ta bort denna tidsbokning?', mtConfirmation, [mbYes, mbNo], 1) = mrNo then
      abort;
  end
end;

procedure TfrmKalender.kalFieldsToItem(Sender: TObject; Fields: TFields; Item: TPlannerItem);
var
  bgc: string;
begin

  with Item do
  begin

    if (Fields.FieldByName('OrderhuvudId').asinteger > 0) and

      ((Fields.FieldByName('AntalAvrapporterad').asinteger) < (Fields.FieldByName('AntalTotal').asinteger))

    then
    begin

      if Fields.FieldByName('BGColor').AsString <> '' then
      begin
        bgc := Fields.FieldByName('BGColor').AsString;

        if Fields.FieldByName('Destination').asinteger = 1 then
        begin

          if copy(bgc, 1, 1) = '$' then

            Item.CaptionBkg := hextotcolor(Fields.FieldByName('BGColor').AsString)
          else
            Item.CaptionBkg := stringtocolor(bgc);

        end

        else
          Item.CaptionBkg := clSilver;

        Item.CaptionBkgTo := Item.CaptionBkg;
      end;

      Item.tag := 1;
      Item.ShowDeleteButton := false;

      // item.FixedPos:= true;
      Item.tag := Fields.FieldByName('OrderhuvudId').asinteger;
      Item.captiontype := ctText;
      Item.CaptionText := Fields.FieldByName('OrderhuvudId').AsString + '  ' + Fields.FieldByName('Beteckning').AsString
        + ' (' + Fields.FieldByName('AntalTotal').AsString + '/' + Fields.FieldByName('AntalAvrapporterad')
        .AsString + ')';
      Item.Hint := Item.CaptionText;
      Shadow := false;

    end
    else
    // manuella noteringar

    begin
      Item.ShowDeleteButton := true;
      Item.captiontype := ctNone;
      Item.tag := 0;
      Item.Hint := '[Delete] för att ta bort en bokning';
    end;

    // selectColor := item.Color;
    // selectColorTo := item.ColorTo;

    // CaptionBkg:= clBlue;
    // CaptionBkgTo:= clBlue;

    // CaptionFont.Color := clWhite;
    // BorderColor := clBlue;
    // Hint := Fields.FieldByName('Hint').asString;
    // CaptionType := ctText;
    // HintIndicator:= true;
    // shape:= psTool;

  end;
end;

procedure TfrmKalender.kalItemCreated(Sender: TObject; Item: TPlannerItem);
begin
  (*
    with TfrmKalenderarende.Create(application) do
    begin
    edtStartdatum.date := Item.ItemStartTime;
    edtSlutdatum.date := Item.ItemEndTime;
    edtMemo.Text := Item.Text.Text;

    showmodal;
    if modalresult = mrOK then
    begin
    Item.ItemStartTime := edtStartdatum.date;
    Item.ItemEndTime := edtSlutdatum.date;
    Item.Text.Text := edtMemo.Text;
    Item.update;
    end;
    kal.Refresh;
    end;
  *)
end;

procedure TfrmKalender.kalItemDblClick(Sender: TObject; Item: TPlannerItem);
var
  id: integer;
begin
  (*
    if Item.tag = 0 then
    with TfrmKalenderarende.Create(application) do
    begin
    edtStartdatum.date := Item.ItemStartTime;
    edtSlutdatum.date := Item.ItemEndTime;
    edtMemo.Text := Item.Text.Text;
    showmodal;
    if modalresult = mrOK then
    begin
    Item.ItemStartTime := edtStartdatum.date;
    Item.ItemEndTime := edtSlutdatum.date;
    Item.Text.Text := edtMemo.Text;
    Item.update;
    end;
    kal.Refresh;
    end
    else
    VisaDagens(Item.tag);
  *)
  with Tfrmdagens.Create(application) do
  begin
    qryDagens.Close;
    qryDagens.ParamByName('Datum').AsDate:= Item.ItemStartTime;
    qryDagens.open;
  end;
end;

procedure TfrmKalender.kalItemRightClick(Sender: TObject; Item: TPlannerItem);
var
  p: Tpoint;

begin
  p := mouse.CursorPos;
  PopupMenu1.popup(p.X, p.Y);

end;

procedure TfrmKalender.kalItemToFields(Sender: TObject; Fields: TFields; Item: TPlannerItem);
begin

  Fields.FieldByName('Starttid').AsString := Item.ItemStartTimeStr;
  Fields.FieldByName('Sluttid').AsString := Item.ItemEndTimeStr;

end;

procedure TfrmKalender.Nytt1Click(Sender: TObject);
var
  it: TPlannerItem;
begin

  if (Sender as TMenuItem).MenuIndex = 0 then
  begin
    with TfrmKalenderarende.Create(application) do
    begin
      edtStartdatum.date := kal.date;
      edtSlutdatum.date := kal.date;
      showmodal;

      if modalresult = mrOK then
      begin
        with kal.CreateItem do
        begin
          ItemStartTime := edtStartdatum.date;
          ItemEndTime := edtSlutdatum.date;
          Text.Text := edtMemo.Text;
          update;
        end;
        kal.Refresh;
      end;
    end;
  end
  else if (Sender as TMenuItem).MenuIndex = 1 then
  begin

  end;

end;

procedure TfrmKalender.RadioButton1Click(Sender: TObject);
begin
  with qryKalender do
  begin
    sql.Clear;

    sql.Add(sqldef1 + sqldef2 + ' where k.destination = 2');

    open;
  end;
end;

procedure TfrmKalender.RadioButton2Click(Sender: TObject);
begin
  with qryKalender do
  begin
    sql.Clear;
    sql.Add(sqldef1 + sqldef2 + ' where k.destination = 1');
    open;
  end;
end;

procedure TfrmKalender.RadioButton3Click(Sender: TObject);
begin
  with qryKalender do
  begin
    sql.Clear;
    sql.Add(sqldef1 + sqldef2);
    open;
  end;

end;

end.
